name: WASI Build and Test

on:
  push:
    branches:
      - master
      - wasi-build
    tags:
      - "v*"
  pull_request:
    paths:
      - 'src/**'
      - 'wasi/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/wasi-build.yml'
  workflow_dispatch:
    inputs:
      release_build:
        description: 'Build release version'
        required: false
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wasi:
    name: Build WASI Components
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(echo ${GITHUB_SHA} | cut -c1-8)
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip2, wasm32-wasip1
          components: rust-src

      - name: Install WASI build tools
        run: |
          echo "Installing cargo-component..."
          cargo install cargo-component --version 0.21.1 --locked
          
          echo "Installing wasm-tools..."
          cargo install wasm-tools --version 1.235.0 --locked
          
          echo "Installing wasmtime CLI..."
          curl -sSL https://github.com/bytecodealliance/wasmtime/releases/download/v28.0.0/wasmtime-v28.0.0-x86_64-linux.tar.xz | \
            tar -xJ -C /tmp
          sudo mv /tmp/wasmtime-v28.0.0-x86_64-linux/wasmtime /usr/local/bin/
          wasmtime --version

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-wasi-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-wasi-

      - name: Build core WASI component
        run: |
          echo "Building core library component..."
          cargo build \
            --target wasm32-wasip2 \
            --profile=wasi-release \
            --no-default-features \
            --features=wasi-component
          
          # Check if it's already a component
          if wasm-tools validate target/wasm32-wasip2/wasi-release/scryer_prolog.wasm --features component-model 2>/dev/null; then
            echo "Output is already a component"
            cp target/wasm32-wasip2/wasi-release/scryer_prolog.wasm \
               target/wasm32-wasip2/wasi-release/scryer_prolog_component.wasm
          else
            echo "Creating component from module"
            wasm-tools component new target/wasm32-wasip2/wasi-release/scryer_prolog.wasm \
              -o target/wasm32-wasip2/wasi-release/scryer_prolog_component.wasm
          fi
          
          # Validate the component
          wasm-tools validate target/wasm32-wasip2/wasi-release/scryer_prolog_component.wasm
          
          # Report size
          ls -lh target/wasm32-wasip2/wasi-release/scryer_prolog_component.wasm

      - name: Build CLI component
        run: |
          echo "Building CLI component..."
          cd wasi/cli
          
          # Update dependencies
          cargo update
          
          # Build the CLI
          cargo build --target wasm32-wasip2 --release
          
          # Report size
          ls -lh target/wasm32-wasip2/release/scryer-prolog-full-cli.wasm
          cd ../..

      - name: Compose final WASI component
        run: |
          echo "Composing final WASI CLI..."
          
          # Use wasm-tools compose to combine components
          wasm-tools compose \
            wasi/cli/target/wasm32-wasip2/release/scryer-prolog-full-cli.wasm \
            --plug target/wasm32-wasip2/wasi-release/scryer_prolog_component.wasm \
            -o scryer-prolog-cli.wasm || \
          wasm-tools compose \
            target/wasm32-wasip2/wasi-release/scryer_prolog_component.wasm \
            --plug wasi/cli/target/wasm32-wasip2/release/scryer-prolog-full-cli.wasm \
            -o scryer-prolog-cli.wasm
          
          # Validate final component
          wasm-tools validate scryer-prolog-cli.wasm
          
          # Report final size
          echo "Final CLI component size:"
          ls -lh scryer-prolog-cli.wasm
          
          # Create standalone core component
          cp target/wasm32-wasip2/wasi-release/scryer_prolog_component.wasm scryer-prolog-core.wasm
          echo "Core component size:"
          ls -lh scryer-prolog-core.wasm

      - name: Test basic functionality
        run: |
          echo "Testing basic queries..."
          
          # Test version flag
          wasmtime run scryer-prolog-cli.wasm -v
          
          # Test simple arithmetic
          wasmtime run scryer-prolog-cli.wasm -q "X is 2 + 3."
          
          # Test list operations
          wasmtime run scryer-prolog-cli.wasm -q "member(2, [1,2,3])."
          
          # Test append
          wasmtime run scryer-prolog-cli.wasm -q "append([1,2], [3,4], X)."

      - name: Upload WASI components
        uses: actions/upload-artifact@v4
        with:
          name: wasi-components-${{ steps.version.outputs.version }}
          path: |
            scryer-prolog-cli.wasm
            scryer-prolog-core.wasm
          retention-days: 30

  test-iso-conformity:
    name: ISO Conformity Tests
    needs: build-wasi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download WASI components
        uses: actions/download-artifact@v4
        with:
          name: wasi-components-${{ needs.build-wasi.outputs.version }}

      - name: Install wasmtime
        run: |
          curl -sSL https://github.com/bytecodealliance/wasmtime/releases/download/v28.0.0/wasmtime-v28.0.0-x86_64-linux.tar.xz | \
            tar -xJ -C /tmp
          sudo mv /tmp/wasmtime-v28.0.0-x86_64-linux/wasmtime /usr/local/bin/
          wasmtime --version

      - name: Prepare ISO test runner
        run: |
          cat > run-iso-tests.pl << 'EOF'
          % ISO Test Runner for CI
          :- consult('tests-pl/iso-conformity-tests.pl').
          
          run_and_report :-
              findall(Test,
                      (current_predicate(iso_conformity_tests:Test/0),
                       atom_chars(Test, C),
                       append("test_", _, C)),
                      AllTests),
              length(AllTests, Total),
              format("Found ~w ISO conformity tests~n", [Total]),
              findall(Test,
                      (member(Test, AllTests),
                       \+ catch(iso_conformity_tests:Test, _, fail)),
                      Failed),
              length(Failed, FailCount),
              PassCount is Total - FailCount,
              format("Results: ~w passed, ~w failed out of ~w total~n", 
                     [PassCount, FailCount, Total]),
              (Failed = [] ->
                  (format("All ISO tests passed!~n"), halt(0))
              ;
                  (format("Failed tests: ~w~n", [Failed]), halt(1))
              ).
          
          :- initialization(run_and_report).
          EOF

      - name: Run ISO conformity tests
        run: |
          echo "Running ISO conformity test suite..."
          wasmtime run --dir=. scryer-prolog-cli.wasm \
            -f run-iso-tests.pl 2>&1 | tee iso-test-results.txt || true
          
          # Check if all tests passed
          if grep -q "All ISO tests passed!" iso-test-results.txt; then
            echo "✅ All ISO conformity tests passed!"
            exit 0
          else
            echo "❌ Some ISO tests failed. See output above."
            exit 1
          fi

      - name: Test sample programs
        run: |
          echo "Testing sample Prolog programs..."
          
          # Create a simple test program
          cat > factorial.pl << 'EOF'
          factorial(0, 1).
          factorial(N, F) :- 
              N > 0,
              N1 is N - 1,
              factorial(N1, F1),
              F is N * F1.
          EOF
          
          # Test factorial
          echo "Testing factorial(5, X)..."
          wasmtime run --dir=. scryer-prolog-cli.wasm \
            -f factorial.pl -q "factorial(5, X)."
          
          # Create a family tree example
          cat > family.pl << 'EOF'
          parent(tom, bob).
          parent(tom, liz).
          parent(bob, ann).
          parent(bob, pat).
          parent(pat, jim).
          
          grandparent(X, Z) :- parent(X, Y), parent(Y, Z).
          ancestor(X, Y) :- parent(X, Y).
          ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).
          EOF
          
          # Test family relations
          echo "Testing family relations..."
          wasmtime run --dir=. scryer-prolog-cli.wasm \
            -f family.pl -q "grandparent(tom, X)."

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ needs.build-wasi.outputs.version }}
          path: |
            iso-test-results.txt
          retention-days: 30

  release:
    name: Create Release
    needs: [build-wasi, test-iso-conformity]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download WASI components
        uses: actions/download-artifact@v4
        with:
          name: wasi-components-${{ needs.build-wasi.outputs.version }}

      - name: Create checksums
        run: |
          sha256sum scryer-prolog-cli.wasm > scryer-prolog-cli.wasm.sha256
          sha256sum scryer-prolog-core.wasm > scryer-prolog-core.wasm.sha256

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.build-wasi.outputs.version }}
          draft: false
          prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
          files: |
            scryer-prolog-cli.wasm
            scryer-prolog-cli.wasm.sha256
            scryer-prolog-core.wasm
            scryer-prolog-core.wasm.sha256
          body: |
            # Scryer Prolog WASI Components ${{ needs.build-wasi.outputs.version }}

            This release includes WebAssembly (WASI) components for Scryer Prolog.

            ## Components

            - **`scryer-prolog-cli.wasm`**: Full CLI with REPL, file loading, and query execution
            - **`scryer-prolog-core.wasm`**: Core Prolog engine for embedding in other applications

            ## Usage

            ### CLI Component
            ```bash
            # Run REPL
            wasmtime run scryer-prolog-cli.wasm

            # Execute query
            wasmtime run scryer-prolog-cli.wasm -q "member(X, [1,2,3])."

            # Load file and query
            wasmtime run --dir=. scryer-prolog-cli.wasm -f program.pl -q "goal."
            ```

            ### Core Component
            The core component can be embedded in other WASI applications. See the documentation for integration details.

            ## ISO Conformity
            ✅ All 266 ISO Prolog conformity tests pass

            ## Requirements
            - A WASI runtime like [Wasmtime](https://wasmtime.dev/) v28.0.0 or later
            - For file access, use `--dir=.` flag with wasmtime

            ## Checksums
            SHA-256 checksums are provided for verification.